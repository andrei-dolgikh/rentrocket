// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}
enum Roles {
  user
  admin
}

enum Status {
  ACTIVE
  INACTIVE
  DELETED
  NEW
}

enum FlatInvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum FlatInvitationRole {
  OWNER
  MANAGER
  RENTER
}

enum NotificationType {
  INVITATION
  MESSAGE
}

model User {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  login String @unique
  email String @unique @default("")
  primaryPhone String @default("")
  name String @unique
  password String

  roles Roles[]  
  tags Tag[]
  notifications UserNotification[]

  flatsLogs FlatHistory[]

  FlatsInRent Flat[] @relation("renters")
  FlatsInManagement Flat[] @relation("managers")
  FlatsInOwnership Flat[] @relation("owners")
  CreatedFlats Flat[]

  receivedInvitations FlatInvitation[]
  sentInvitations FlatInvitation[] @relation("InvitedBy")


  @@map("users")
}


model Flat {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String // название 
  description String // описание 

  order Int // 

  address String?
  entergroup String?
  size Int?
  chambres Int?
  

  managers User[] @relation("managers")
  renters User[] @relation("renters")
  owners User[] @relation("owners")
  creator User @relation(fields: [creatorId], references: [id])
  creatorId String @map("creator_id")

  invitations FlatInvitation[]

  tags Tag[]  // набор тегов

  // превью фото квартиры
  iconUrl String? @map("icon_url")
  images String[] @default([])

  logs FlatHistory[]

  @@map("flats")
}

model FlatInvitation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  email     String
  role      FlatInvitationRole 
  status    FlatInvitationStatus @default(PENDING)
  
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")
  
  flat      Flat     @relation(fields: [flatId], references: [id])
  flatId    String   @map("flat_id")
  
  invitedBy User     @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedById String @map("invited_by_id")
  
  @@map("flat_invitations")
}

model UserNotification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  message   String
  notificationType NotificationType
  seen      Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @map("user_id")
  
  @@map("user_notifications")
}

model FlatHistory {
  id String @id @default(cuid())
  updatedAt DateTime @updatedAt @map("updated_at")

  changes Json 

  author User @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")  //  связь с автором ресурса

  flat Flat @relation(fields: [flatId], references: [id])
  flatId String @map("flat_id")  //  связь с ресурс

}

model Visit {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  endpoint  String
  method    String
  params    Json    
}

model Tag {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  flats Flat[]

  name String // название тега
  order Int // порядковый номер

  creator User @relation(fields: [creatorId], references: [id])
  creatorId String @map("creator_id")


  @@map("tags")
}

